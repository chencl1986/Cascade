{"version":3,"sources":["components/Cascade/CascadeData.ts","components/Cascade/Cascade.tsx","components/Cascade/CascadeTypes.ts","services/getPCASelection.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["CascadeData","cascades","valueKey","labelKey","childrenKey","dataSource","length","keys","valueItemMaps","valueLabelMaps","codeRoutesMap","Map","firstCascadeMaps","childrenMaps","codeChildrenMap","cascadeValidator","rule","callback","source","options","validateCascades","message","messages","required","replace","field","this","initRootChildrenMaps","init","initKeys","data","level","parentIndexes","forEach","item","index","setMap","i","push","md5","Math","random","toString","cascade","newCascade","set","removeChildren","map","children","value","get","result","Array","isArray","undefined","Option","Select","State","Cascade","props","cascadeData","cascadeMaps","updateDataSource","cascadeKeys","forceUpdate","onChange","code","a","onSyncChange","onAsyncChange","setState","buildKeys","buildCascadeMaps","console","log","state","j","selectedValue","getItem","selectedValues","lastSelectedValue","getLength","getFirstCascade","slice","getKeys","getSelections","prevProps","prevState","JSON","stringify","rowProps","key","colProps","placeholder","nextProps","nextState","keysLength","dataSourceLength","React","Component","defaultProps","gutter","xs","sm","md","lg","xl","sleep","t","Promise","resolve","reject","setTimeout","pcaData","pcaCode","getPCASelection","getSelectionByValue","newItem","pcaCascadeKeys","pcaCascadeData","App","Form","useForm","form","useState","setPCAData","changedPCAIndex","setPCAIndex","asyncPCAData","setAsyncPCAData","changedAsyncPCAIndex","setAsyncPCAIndex","validateResult","setValidateResult","setDataSource","onValidate","useCallback","validateFields","error","asyncPCAValidator","findIndex","className","Item","name","label","extra","rules","validator","newDataSource","style","display","justifyContent","marginBottom","type","onClick","lineHeight","color","fontWeight","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"4WAgUeA,G,kBA/Sb,WAAYC,EAAZ,GAA8E,IAAD,OAAhDC,EAAgD,EAAhDA,SAAUC,EAAsC,EAAtCA,SAAUC,EAA4B,EAA5BA,YAA4B,yBAWrEF,SAAmB,QAXkD,KAarEC,SAAmB,QAbkD,KAerEC,YAAsB,WAf+C,KAiBrEC,WAAkB,GAjBmD,KAoBrEC,OAAiB,EApBoD,KAuBrEC,KAAiB,GAvBoD,KA0BrEC,cAAwC,GA1B6B,KA6BrEC,eAAuD,GA7Bc,KAgCrEC,cAA6C,IAAIC,IAhCoB,KAsCrEC,iBAA2C,CAAC,IAAID,KAtCqB,KAyCrEE,aAAkD,CACxD,IAAIF,KA1CuE,KA8CrEG,gBAA0C,IAAIH,IA9CuB,KA8RtEI,iBAAmB,SACxBC,EACAf,EACAgB,EACAC,EACAC,GAEI,EAAKC,iBAAiBnB,GACxBgB,IAEAA,EACED,EAAKK,SAAWF,EAAQG,SAASC,SAASC,QAAQ,KAAMR,EAAKS,SAxSjEC,KAAKrB,WAAaJ,EAClByB,KAAKxB,SAAWA,EAChBwB,KAAKvB,SAAWA,EAChBuB,KAAKtB,YAAcA,EACnBsB,KAAKC,qBAAqB1B,GAC1ByB,KAAKE,KAAK3B,GACVyB,KAAKpB,OAASoB,KAAKjB,eAAeH,OAClCoB,KAAKG,W,iDA4CMC,GAA8D,IAAD,OAAlDC,EAAkD,uDAAlC,EAAGC,EAA+B,uDAAL,CAAC,GACpEF,EAAKG,SAAQ,SAACC,EAASC,GACrB,EAAKC,OAAOF,EAAMH,EAAOC,GACrBE,EAAK,EAAK9B,cACZ,EAAKwB,KAAKM,EAAK,EAAK9B,aAAc2B,EAAQ,EAA1C,sBAAiDC,GAAjD,CAAgEG,U,iCAOpE,IAAK,IAAIE,EAAI,EAAGA,EAAIX,KAAKpB,OAAQ+B,IAC/BX,KAAKnB,KAAK+B,KAAKC,IAAIC,KAAKC,SAASC,e,qCAKdC,GACrB,IAAIC,EAAU,eAAQD,GAEtB,cADOC,EAAWlB,KAAKtB,aAChBwC,I,6BAIMD,EAAYZ,EAAeC,GAAgC,IAAD,OAClEN,KAAKlB,cAAcuB,IACtBL,KAAKlB,cAAc8B,KAAK,IAAI3B,KAE1BgC,EAAQjB,KAAKvB,WACfuB,KAAKlB,cAAcuB,GAAOc,IACxBF,EAAQjB,KAAKxB,UACbwB,KAAKoB,eAAeH,IAInBjB,KAAKjB,eAAesB,IACvBL,KAAKjB,eAAe6B,KAAK,IAAI3B,KAE3BgC,EAAQjB,KAAKvB,WACfuB,KAAKjB,eAAesB,GAAOc,IACzBF,EAAQjB,KAAKxB,UACbyC,EAAQjB,KAAKvB,WAIjBuB,KAAKhB,cAAcmC,IAAIF,EAAQjB,KAAKxB,UAAW8B,GAC/CN,KAAKZ,gBAAgB+B,IACnBF,EAAQjB,KAAKxB,UACbyC,EAAQjB,KAAKtB,aACTuC,EAAQjB,KAAKtB,aAAa2C,KACxB,SAACJ,GAAD,OAAmB,EAAKG,eAAeH,MAEzC,IAGFA,EAAQK,YACTtB,KAAKb,aAAakB,EAAQ,IACzBL,KAAKb,aAAayB,KAAK,IAAI3B,KAC7Be,KAAKb,aAAakB,EAAQ,GAAGc,IAC3BF,EAAQjB,KAAKxB,UACbyC,EAAQjB,KAAKtB,aACTuC,EAAQjB,KAAKtB,aAAa2C,KACxB,SAACJ,GAAD,OAAmB,EAAKG,eAAeH,MAEzC,KAILjB,KAAKd,iBAAiBmB,EAAQ,IAC7BL,KAAKd,iBAAiB0B,KAAK,IAAI3B,KAC7BgC,EAAQjB,KAAKtB,aAAa,IAC5BsB,KAAKd,iBAAiBmB,EAAQ,GAAGc,IAC/BF,EAAQjB,KAAKxB,UACbwB,KAAKoB,eAAeH,EAAQjB,KAAKtB,aAAa,Q,2CAOzBH,GAAsB,IAAD,OAChDyB,KAAKb,aAAa,GAAGgC,IACnB,OACA5C,EAAS8C,KAAI,SAACJ,GAAD,OAAmB,EAAKG,eAAeH,OAEtDjB,KAAKZ,gBAAgB+B,IACnB,OACA5C,EAAS8C,KAAI,SAACJ,GAAD,OAAmB,EAAKG,eAAeH,OAElD1C,EAAS,IACXyB,KAAKd,iBAAiB,GAAGiC,IAAI,OAAQnB,KAAKoB,eAAe7C,EAAS,O,sCASpE,OAAOyB,KAAKrB,a,gCAQZ,OAAOqB,KAAKnB,O,kCAQZ,OAAOmB,KAAKpB,S,8BASCyB,EAAekB,GAC5B,OAAOvB,KAAKlB,cAAcuB,GAAOmB,IAAID,K,+BASvBlB,EAAekB,GAC7B,OAAOvB,KAAKjB,eAAesB,GAAOmB,IAAID,K,mCASpBlB,EAAgBkB,GAClC,OAAIA,GAASlB,GACJL,KAAKb,aAAakB,GAAOmB,IAAID,IAE/B,K,0CAQkBA,GACzB,OAAIA,GACKvB,KAAKZ,gBAAgBoC,IAAID,IAE3B,K,oCAQYhD,GACnB,IAAIkD,EAAgB,CAACzB,KAAKb,aAAa,GAAGqC,IAAI,SAAW,IAEzD,GAAIxB,KAAKpB,OACP,IAAK,IAAI6B,EAAQ,EAAGA,EAAQT,KAAKpB,OAAQ6B,IAAS,CAChD,IAAMQ,EAAU1C,EAASkC,GAErBA,EAAQT,KAAKpB,OAAS,GACxB6C,EAAOb,KACJK,GACCjB,KAAKb,aAAasB,EAAQ,GAAGe,IAAIP,EAAQjB,KAAKxB,YAC9C,IAMV,OAAOiD,I,sCAScpB,EAAekB,GACpC,OAAKlB,EAIEL,KAAKd,iBAAiBmB,GAAOmB,IAAID,GAH/BvB,KAAKd,iBAAiB,GAAGsC,IAAI,U,uCAWhBjD,GACtB,GAAImD,MAAMC,QAAQpD,IAAaA,EAASK,OAAQ,CAC9C,IAAK,IAAI6B,EAAQ,EAAGA,EAAQlC,EAASK,OAAQ6B,IAAS,CACpD,IAAMQ,EAAU1C,EAASkC,GAEzB,IACGQ,QAC0BW,IAA3BX,EAAQjB,KAAKxB,WACc,OAA3ByC,EAAQjB,KAAKxB,UAEb,OAAO,EAGX,OAAO,EAGT,OAAO,M,iCCvQLqD,EAASC,IAAOD,OAgBTE,EAAb,sCACER,MAAa,GADf,KAEE1C,KAAiB,IAGbmD,E,kDAoDJ,WAAYC,GAAkB,IAAD,uBAC3B,cAAMA,IALAC,iBAIqB,IAF7BC,YAAsC,GAET,EA4BtBC,iBAAmB,SAACzD,GACzB,EAAKuD,YAAc,IAAI5D,EACrBK,GAAc,GACd,EAAKsD,MAAMI,aAEb,EAAKC,eAjCsB,EAqCrBC,SArCqB,uCAqCV,WAAOC,EAAoBnC,GAA3B,iBAAAoC,EAAA,sDACblB,EAAQ,GAGVA,EADE,EAAKW,YACC,EAAKQ,aAAaF,EAAMnC,GAExB,EAAKsC,cAAcH,EAAMnC,GAG7B,UAAW,EAAK4B,OACpB,EAAKW,SAAS,CACZrB,WAKEgB,EAAW,EAAKN,MAAMM,WAChBA,EAAShB,EAAOlB,GAjBX,2CArCU,wDAG3B,IAAM1B,EAAa,EAAKsD,MAAMtD,WAC1BE,EAAiB,GAJM,OAMvBF,IACEA,aAAsBL,EACxB,EAAK4D,YAAcvD,EACT+C,MAAMC,QAAQhD,EAAW,KAMnCE,EAAOmD,EAAQa,UAAUlE,EAAWC,QACpC,EAAKuD,YAAc,EAAKW,iBAAiBnE,IANzC,EAAKuD,YAAc,IAAI5D,EACrBK,EACA,EAAKsD,MAAMI,cAOjBU,QAAQC,IAAI,EAAKd,aAEjB,EAAKe,MAAL,eACK,IAAIlB,EADT,CAEElD,SAvByB,E,6DAzBJF,GAIvB,IAHA,IAAIwD,EAAsC,GACpCE,EAAcrC,KAAKiC,MAAMI,YAEtB1B,EAAI,EAAGA,EAAIhC,EAAWC,OAAQ+B,IAAK,CACrCwB,EAAYxB,KACfwB,EAAYxB,GAAK,IAAI1B,KAEvB,IAAK,IAAIiE,EAAI,EAAGA,EAAIvE,EAAWgC,GAAG/B,OAAQsE,IACpCvE,EAAWgC,GAAGuC,IAChBf,EAAYxB,GAAGQ,IACbxC,EAAWgC,GAAGuC,GAAGb,EAAY7D,UAC7BG,EAAWgC,GAAGuC,IAMtB,OAAOf,K,iCA5BgBvD,GAGvB,IAFA,IAAIC,EAAiB,GAEZ4B,EAAQ,EAAGA,EAAQ7B,EAAQ6B,IAClC5B,EAAK+B,KAAKC,IAAIC,KAAKC,SAASC,aAG9B,OAAOnC,M,kDAsFY0C,EAAqBlB,GACxC,IAAMgC,EAAcrC,KAAKiC,MAAMI,YACzBc,EAAgBnD,KAAKkC,YAAYkB,QAAQ/C,EAAOkB,GAClD8B,EAAc,YAAOrD,KAAKiD,MAAM1B,OAC9B+B,EACJD,EAAehD,IAAUgD,EAAehD,GAAOmC,KAMjD,GAJIW,IACFE,EAAehD,GAAS8C,IAIvBE,EAAehD,IAChBiD,IAAsBD,EAAehD,GAAOmC,KAE5C,IACE,IAAI/B,EAAQJ,EAAQ,EACpBI,EAAQT,KAAKkC,YAAYqB,YACzB9C,IACA,CACA,IAAMQ,EAAUjB,KAAKkC,YAAYsB,gBAC/B/C,EACA4C,EAAe5C,EAAQ,GAAG4B,EAAY7D,WAGxC,IAAIyC,EAGF,MAFAoC,EAAe5C,GAASQ,EAO9B,OAAOoC,I,oCAIab,EAAoBnC,GACxC,IAAIkB,EAAQvB,KAAKiD,MAAM1B,MAAMkC,MAAM,EAAGpD,GAEtC,GAAIL,KAAKmC,YAAY9B,GAAQ,CAC3B,IAAM8C,EAAgBnD,KAAKmC,YAAY9B,GAAOmB,IAAIgB,GAE9CW,IACF5B,EAAMlB,GAAS8C,GAInB,OAAO5B,I,gCAIP,OAAIvB,KAAKkC,YACAlC,KAAKkC,YAAYwB,UAEjB1D,KAAKiD,MAAMpE,O,sCAMpB,OAAImB,KAAKkC,YACAlC,KAAKkC,YAAYyB,cAAc3D,KAAKiD,MAAM1B,OAEzCvB,KAAKiC,MAAMtD,YAAwB,K,yCAmC5BiF,EAAqBC,GAClCD,EAAUjF,YAAcqB,KAAKiC,MAAMtD,YAEnCmF,KAAKC,UAAUH,EAAUjF,cACzBmF,KAAKC,UAAU/D,KAAKiC,MAAMtD,cAE1BqB,KAAKmC,YAAcnC,KAAK8C,iBACtB9C,KAAKiC,MAAMtD,e,+BAMT,IAAD,OACDE,EAAOmB,KAAK0D,UACZrB,EAAcrC,KAAKiC,MAAMI,YAE/B,OACE,kBAAC,IAAQrC,KAAKiC,MAAM+B,SACjBhE,KAAK2D,gBAAgBtC,KACpB,SAAC9C,EAAe8B,GACd,IAAMkB,EACJ,EAAK0B,MAAM1B,MAAMlB,IACjB,EAAK4C,MAAM1B,MAAMlB,GAAOgC,EAAY7D,UAEtC,OACE,kBAAC,IAAD,eAAKyF,IAAKpF,EAAKwB,IAAY,EAAK4B,MAAMiC,UACpC,kBAAC,IAAD,CACE3C,MAAOA,EACP4C,YAAa,qBACb5B,SAAU,SAAChB,GACT,EAAKgB,SAAShB,EAAOlB,KAGtB9B,EAAS8C,KACR,SAACJ,GACC,OACE,kBAACY,EAAD,CACEoC,IAAKhD,EAAQoB,EAAY7D,UAAUwC,WACnCO,MAAON,EAAQoB,EAAY7D,WAE1ByC,EAAQoB,EAAY5D,uB,gDAvE3C2F,EACAP,GAEA,IAAIQ,EAAiC,GAC/BC,EAAaT,EAAUhF,KAAKD,OAElC,GACEiF,EAAUhF,KAAKD,QACf8C,MAAMC,QAAQyC,EAAUzF,aACxB2F,IAAeF,EAAUzF,WAAWC,OACpC,CACA,IAAM2F,EAAmBH,EAAUzF,WAAWC,OAG5CyF,EAAUxF,KADRyF,EAAaC,EACf,sBACKV,EAAUhF,MADf,YAEKmD,EAAQa,UAAU0B,EAAmBD,KAGzBT,EAAUhF,KAAK4E,MAAM,EAAGc,GAQ7C,MAJI,UAAWH,IACbC,EAAU9C,MAAQ6C,EAAU7C,OAAS,IAGhC8C,M,GA5MDG,IAAMC,WAFVzC,EAGG0C,aAAe,CACpBrC,YAAa,IClCjB,sCACE7D,SAAmB,QADrB,KAEEC,SAAmB,QAFrB,KAGEC,YAAsB,YDgCpBsF,SAAU,CACRW,OAAQ,IAEVT,SAAU,CACRU,GAAI,GACJC,GAAI,GACJC,GAAI,EACJC,GAAI,EACJC,GAAI,IA4PKhD,Q,QEtTf,SAASiD,EAAMC,GACb,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,WAAWF,EAASF,MAIxB,IAAMK,EAAU,IAAIjH,EAAqBkH,EAAS,CAChDhH,SAAU,OACVC,SAAU,OACVC,YAAa,aAIA,SAAe+G,EAA9B,kC,4CAAe,WACbjD,GADa,SAAAC,EAAA,+EAGN,IAAI0C,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,SAAA5C,EAAA,sEACXwC,EAAM,KADK,OAEjBG,EACEG,EAAQG,oBAAoBlD,GAAMnB,KAChC,SAACb,GACC,IAAImF,EAAO,eAAQnF,GAEnB,cADOmF,EAAQrE,SACRqE,MAPI,2CAAZ,0DAHM,4C,4CCDFC,EAA8B,CACzCpH,SAAU,OACVC,SAAU,OACVC,YAAa,YAGTmH,EAAiB,IAAIvH,EAAqBkH,EAASI,GAsJ1CE,MApJf,WAAgB,IAAD,EACEC,IAAKC,UAAbC,EADM,sBAEiBC,mBAA2B,MAF5C,mBAENX,EAFM,KAEGY,EAFH,OAG0BD,mBAAwB,MAHlD,mBAGNE,EAHM,KAGWC,EAHX,OAI2BH,mBAA2B,MAJtD,mBAINI,EAJM,KAIQC,EAJR,OAKoCL,mBAC/C,MANW,mBAKNM,EALM,KAKgBC,EALhB,OAQ+BP,mBAAyB,MARxD,mBAQNQ,EARM,KAQUC,EARV,OASuBT,mBAAsB,CACvDV,EAAsBnE,KACrB,SAACb,GAAD,sBACKA,EADL,CAEEc,cAAUM,OAGd,GACA,KAjBW,mBASNjD,EATM,KASMiI,EATN,KAmBPC,EAAaC,sBAAW,sBAAC,sBAAArE,EAAA,+EAErBwD,EAAKc,iBAFgB,OAG3BJ,GAAkB,GAHS,gDAK3BA,GAAkB,GAClB5D,QAAQiE,MAAR,MAN2B,yDAQ5B,IACGC,EAAoBH,uBACxB,SAACxH,EAAkBiC,GACjB,OAAIG,MAAMC,QAAQJ,IAAUA,EAAM3C,SAAWD,EAAWC,QACxCD,EAAWuI,WAAU,SAAC1G,GAClC,OAAa,OAATA,QAA0BoB,IAATpB,KAMX,EACH2E,QAAQC,UAKVD,QAAQE,OAAO,gDAG1B,IAGF,OACE,kBAAC,IAAD,CAAM8B,UAAW,MAAOlB,KAAMA,GAC5B,kBAAC,IAAKmB,KAAN,CACEC,KAAM,MACNC,MAAO,uCACPC,MAAK,oDACHhC,EAAUzB,KAAKC,UAAUwB,GAAW,GADjC,qDAGwB,kBAApBa,EAA+BA,EAAkB,IAE1DoB,MAAO,CACL,CACEC,UAAW5B,EAAexG,iBAC1BM,QAAS,gDAIb,kBAAC,EAAD,CACEhB,WAAYkH,EACZxD,YAAauD,EACbrD,SAAQ,uCAAE,WAAOhB,EAAkBlB,GAAzB,SAAAoC,EAAA,sDACR0D,EAAW5E,GACX8E,EAAYhG,GAFJ,2CAAF,2DAMZ,kBAAC,IAAK+G,KAAN,CACEC,KAAM,WACNC,MAAO,uCACPC,MAAK,oDACHjB,EAAexC,KAAKC,UAAUuC,GAAgB,GAD3C,qDAG6B,kBAAzBE,EAAoCA,EAAuB,IAEpEgB,MAAO,CACL,CACEC,UAAWR,EACXtH,QAAS,gDAIb,kBAAC,EAAD,CACEhB,WAAYA,EACZ0D,YAAauD,EACbrD,SAAQ,uCAAE,WAAOhB,EAAkBlB,GAAzB,iBAAAoC,EAAA,yDACR8D,EAAgBhF,GAChBkF,EAAiBpG,KACbA,EAAQ1B,EAAWC,OAAS,GAHxB,gCAImB6G,EACvBlE,EAAMlB,GAAOmC,MALT,OAIAtB,EAJA,OAOAwG,EAAgB/I,EAAW0C,KAC/B,SAAC9C,EAAqBkC,GACpB,OAAIA,GAASJ,EACJ9B,EACEkC,IAAUJ,EAAQ,EACpBa,EAEA,MAKb0F,EAAcc,GAnBR,2CAAF,2DAwBZ,yBACEC,MAAO,CACLC,QAAS,OACTC,eAAgB,SAChBC,aAAc,SAGhB,kBAAC,IAAD,CAAQC,KAAM,UAAWC,QAASnB,GAAlC,6BAIF,yBACEc,MAAO,CACLC,QAAS,OACTC,eAAgB,SAChBI,WAAY,SAJhB,iCAQsB,OAAnBvB,EACC,GACEA,EACF,0BAAMiB,MAAO,CAAEO,MAAO,QAASC,WAAY,SAA3C,gBAEA,0BAAMR,MAAO,CAAEO,MAAO,MAAOC,WAAY,SAAzC,mBC3JUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLjE,QAAQiE,MAAMA,EAAMrH,a","file":"static/js/main.06cff553.chunk.js","sourcesContent":["/**\r\n * Created by xm_chenli@huayun.com on 2019/11/21 13:43.\r\n */\r\n\r\n// 引用类型\r\nimport {\r\n  CascadeItem,\r\n  CascadeValue,\r\n  CascadeKeys,\r\n  CascadeDefaultItem,\r\n} from './CascadeTypes';\r\n\r\n// 公共方法\r\nimport md5 from 'md5';\r\n\r\n// 收集级联选择框数据\r\nclass CascadeData<T extends CascadeItem<T> = CascadeDefaultItem> {\r\n  constructor(cascades: T[], { valueKey, labelKey, childrenKey }: CascadeKeys) {\r\n    this.dataSource = cascades;\r\n    this.valueKey = valueKey;\r\n    this.labelKey = labelKey;\r\n    this.childrenKey = childrenKey;\r\n    this.initRootChildrenMaps(cascades);\r\n    this.init(cascades);\r\n    this.length = this.valueLabelMaps.length;\r\n    this.initKeys();\r\n  }\r\n\r\n  private valueKey: string = 'value';\r\n\r\n  private labelKey: string = 'label';\r\n\r\n  private childrenKey: string = 'children';\r\n\r\n  private dataSource: T[] = [];\r\n\r\n  // 级联数据深度\r\n  private length: number = 0;\r\n\r\n  // 用于表单项循环的Key\r\n  private keys: string[] = [];\r\n\r\n  // 以code-item形式存储的级联数据\r\n  private valueItemMaps: Map<CascadeValue, T>[] = [];\r\n\r\n  // 以code-name形式存储的级联数据\r\n  private valueLabelMaps: Map<CascadeValue, React.ReactNode>[] = [];\r\n\r\n  // 储存查询到当前节点的路径\r\n  private codeRoutesMap: Map<CascadeValue, number[]> = new Map<\r\n    CascadeValue,\r\n    number[]\r\n  >();\r\n\r\n  // 存储所有选项中的第一个值，用于选择新选项时，重置后续级联选项\r\n  private firstCascadeMaps: Map<CascadeValue, T>[] = [new Map<'root', T>()];\r\n\r\n  // 存储所有选项数据，可通过层级和Value获取下一级的选项\r\n  private childrenMaps: Map<CascadeValue | 'root', T[]>[] = [\r\n    new Map<'root', T[]>(),\r\n  ];\r\n\r\n  // 按code存储相应的children\r\n  private codeChildrenMap: Map<CascadeValue, T[]> = new Map<\r\n    CascadeValue,\r\n    T[]\r\n  >();\r\n\r\n  // 初始化省市区数据\r\n  private init(data: T[], level: number = 0, parentIndexes: number[] = [0]) {\r\n    data.forEach((item: T, index: number): void => {\r\n      this.setMap(item, level, parentIndexes);\r\n      if (item[this.childrenKey]) {\r\n        this.init(item[this.childrenKey], level + 1, [...parentIndexes, index]);\r\n      }\r\n    });\r\n  }\r\n\r\n  // 初始化选择框的Key\r\n  private initKeys(): void {\r\n    for (let i = 0; i < this.length; i++) {\r\n      this.keys.push(md5(Math.random().toString()));\r\n    }\r\n  }\r\n\r\n  // 删除当前节点的children\r\n  private removeChildren(cascade: T): T {\r\n    let newCascade = { ...cascade };\r\n    delete newCascade[this.childrenKey];\r\n    return newCascade;\r\n  }\r\n\r\n  // 为级联Map数据设置值\r\n  private setMap(cascade: T, level: number, parentIndexes: number[]): void {\r\n    if (!this.valueItemMaps[level]) {\r\n      this.valueItemMaps.push(new Map<CascadeValue, T>());\r\n    }\r\n    if (cascade[this.labelKey]) {\r\n      this.valueItemMaps[level].set(\r\n        cascade[this.valueKey],\r\n        this.removeChildren(cascade)\r\n      );\r\n    }\r\n\r\n    if (!this.valueLabelMaps[level]) {\r\n      this.valueLabelMaps.push(new Map<CascadeValue, React.ReactNode>());\r\n    }\r\n    if (cascade[this.labelKey]) {\r\n      this.valueLabelMaps[level].set(\r\n        cascade[this.valueKey],\r\n        cascade[this.labelKey]\r\n      );\r\n    }\r\n\r\n    this.codeRoutesMap.set(cascade[this.valueKey], parentIndexes);\r\n    this.codeChildrenMap.set(\r\n      cascade[this.valueKey],\r\n      cascade[this.childrenKey]\r\n        ? cascade[this.childrenKey].map(\r\n            (cascade: T): T => this.removeChildren(cascade)\r\n          )\r\n        : []\r\n    );\r\n\r\n    if (cascade.children) {\r\n      !this.childrenMaps[level + 1] &&\r\n        this.childrenMaps.push(new Map<CascadeValue, T[]>());\r\n      this.childrenMaps[level + 1].set(\r\n        cascade[this.valueKey],\r\n        cascade[this.childrenKey]\r\n          ? cascade[this.childrenKey].map(\r\n              (cascade: T): T => this.removeChildren(cascade)\r\n            )\r\n          : []\r\n      );\r\n\r\n      // 存储每个层级的第一个选项\r\n      !this.firstCascadeMaps[level + 1] &&\r\n        this.firstCascadeMaps.push(new Map<CascadeValue, T>());\r\n      if (cascade[this.childrenKey][0]) {\r\n        this.firstCascadeMaps[level + 1].set(\r\n          cascade[this.valueKey],\r\n          this.removeChildren(cascade[this.childrenKey][0])\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  // 初始化childrenMaps，提供每个层级的初始Map，第一层级\r\n  private initRootChildrenMaps(cascades: T[]): void {\r\n    this.childrenMaps[0].set(\r\n      'root',\r\n      cascades.map((cascade: T): T => this.removeChildren(cascade))\r\n    );\r\n    this.codeChildrenMap.set(\r\n      'root',\r\n      cascades.map((cascade: T): T => this.removeChildren(cascade))\r\n    );\r\n    if (cascades[0]) {\r\n      this.firstCascadeMaps[0].set('root', this.removeChildren(cascades[0]));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * getOriginalDataSource 获取原始数据\r\n   * @returns {T[]}  原始数据\r\n   */\r\n  public getDataSource(): T[] {\r\n    return this.dataSource;\r\n  }\r\n\r\n  /**\r\n   * getKeys 获取用于表单项循环的Key\r\n   * @returns {string[]}  表单项循环的Key\r\n   */\r\n  public getKeys(): string[] {\r\n    return this.keys;\r\n  }\r\n\r\n  /**\r\n   * getLength 获取级联的长度\r\n   * @returns {number}  级联的长度\r\n   */\r\n  public getLength(): number {\r\n    return this.length;\r\n  }\r\n\r\n  /**\r\n   * getName\r\n   * @param {number} level  级联层级\r\n   * @param {CascadeValue} value  级联数据Value\r\n   * @returns {T | undefined}  通过级联当前层Value获取相应选项\r\n   */\r\n  public getItem(level: number, value: CascadeValue): T | undefined {\r\n    return this.valueItemMaps[level].get(value);\r\n  }\r\n\r\n  /**\r\n   * getName\r\n   * @param {number} level  级联层级\r\n   * @param {CascadeValue} value  级联数据Value\r\n   * @returns {React.ReactNode}  通过级联当前层Value获取相应名称\r\n   */\r\n  public getLabel(level: number, value: CascadeValue): React.ReactNode {\r\n    return this.valueLabelMaps[level].get(value);\r\n  }\r\n\r\n  /**\r\n   * getSelection\r\n   * @param {number} level  级联层级\r\n   * @param {CascadeValue} value  级联数据value\r\n   * @returns {T[] | undefined } 通过级联当前层value获取子集\r\n   */\r\n  public getSelection(level?: number, value?: CascadeValue): T[] {\r\n    if (value && level) {\r\n      return this.childrenMaps[level].get(value) || [];\r\n    }\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * getSelectionByValue\r\n   * @param {CascadeValue} value  级联数据value\r\n   * @returns {T[] | undefined } 通过级联当前层value获取子集\r\n   */\r\n  public getSelectionByValue(value?: CascadeValue): T[] {\r\n    if (value) {\r\n      return this.codeChildrenMap.get(value) || [];\r\n    }\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * getSelections\r\n   * @param {T[]} cascades  已选择的级联数据\r\n   * @returns {T[][]}  供选择的级联数据\r\n   */\r\n  public getSelections(cascades: T[]): T[][] {\r\n    let result: T[][] = [this.childrenMaps[0].get('root') || []];\r\n\r\n    if (this.length) {\r\n      for (let index = 0; index < this.length; index++) {\r\n        const cascade = cascades[index];\r\n\r\n        if (index < this.length - 1) {\r\n          result.push(\r\n            (cascade &&\r\n              this.childrenMaps[index + 1].get(cascade[this.valueKey])) ||\r\n              []\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * getFirstCascade\r\n   * @param {number} level  级联层级\r\n   * @param {CascadeValue} value  级联数据value\r\n   * @returns {T}  每层级项目的第一个选项\r\n   */\r\n  public getFirstCascade(level: number, value: CascadeValue): T | undefined {\r\n    if (!level) {\r\n      return this.firstCascadeMaps[0].get('root');\r\n    }\r\n\r\n    return this.firstCascadeMaps[level].get(value);\r\n  }\r\n\r\n  /**\r\n   * validateCascades 校验已选择的Cascade数据是否合法，但不保证数据是否在选项中存在\r\n   * @param {T[]} cascades  级联层级\r\n   * @returns {boolean}  校验结果\r\n   */\r\n  public validateCascades(cascades: T[]): boolean {\r\n    if (Array.isArray(cascades) && cascades.length) {\r\n      for (let index = 0; index < cascades.length; index++) {\r\n        const cascade = cascades[index];\r\n\r\n        if (\r\n          !cascade ||\r\n          cascade[this.valueKey] === undefined ||\r\n          cascade[this.valueKey] === null\r\n        ) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * cascadeValidator 基于rc-form的校验方法\r\n   * @param {any} rule  当前表单项校验规则\r\n   * @param {T[]} cascades  已选择的级联数据\r\n   * @param {any} callback  callback函数，有传参表示校验错误\r\n   * @param {any} source  当前表单所有数据\r\n   * @param {any} options  表单项默认选项\r\n   */\r\n  public cascadeValidator = (\r\n    rule: any,\r\n    cascades: T[],\r\n    callback: any,\r\n    source?: any,\r\n    options?: any\r\n  ): void => {\r\n    if (this.validateCascades(cascades)) {\r\n      callback();\r\n    } else {\r\n      callback(\r\n        rule.message || options.messages.required.replace(/%s/, rule.field)\r\n      );\r\n    }\r\n  };\r\n}\r\n\r\nexport default CascadeData;\r\n","/**\r\n * Created by xm_chenli@huayun.com on 2019/11/21 14:30.\r\n */\r\n\r\n// 第三方库\r\nimport React from 'react';\r\nimport md5 from 'md5';\r\n\r\n// 样式表\r\nimport './Cascade.css';\r\n\r\n// 引用类型\r\nimport { RowProps } from 'antd/lib/row';\r\nimport { ColProps } from 'antd/lib/col';\r\nimport {\r\n  CascadeItem,\r\n  CascadeValue,\r\n  CascadeKeys,\r\n  CascadeDefaultItem,\r\n} from './CascadeTypes';\r\n\r\n// 常量\r\n\r\n// 公共方法\r\nimport CascadeData from './CascadeData';\r\n\r\n// 组件\r\nimport { Row, Col, Select } from 'antd';\r\n\r\nconst Option = Select.Option;\r\n\r\n// 网络请求接口\r\n\r\n// 组件方法\r\n\r\n// 组件类型\r\nexport interface Props<T> {\r\n  cascadeKeys: CascadeKeys;\r\n  value?: T[];\r\n  onChange?: (value: T[], level: number) => void;\r\n  rowProps?: RowProps;\r\n  colProps?: ColProps;\r\n  dataSource?: T[] | CascadeData<T> | T[][];\r\n}\r\n\r\nexport class State<T> {\r\n  value: T[] = [];\r\n  keys: string[] = [];\r\n}\r\n\r\nclass Cascade<\r\n  T extends CascadeItem<T> = CascadeDefaultItem\r\n> extends React.Component<Props<T>, State<T>> {\r\n  static defaultProps = {\r\n    cascadeKeys: new CascadeKeys(),\r\n    rowProps: {\r\n      gutter: 10,\r\n    },\r\n    colProps: {\r\n      xs: 24,\r\n      sm: 24,\r\n      md: 8,\r\n      lg: 8,\r\n      xl: 8,\r\n    },\r\n  };\r\n\r\n  private static buildKeys(length: number): string[] {\r\n    let keys: string[] = [];\r\n\r\n    for (let index = 0; index < length; index++) {\r\n      keys.push(md5(Math.random().toString()));\r\n    }\r\n\r\n    return keys;\r\n  }\r\n\r\n  private buildCascadeMaps(dataSource: T[][]): Map<CascadeValue, T>[] {\r\n    let cascadeMaps: Map<CascadeValue, T>[] = [];\r\n    const cascadeKeys = this.props.cascadeKeys;\r\n\r\n    for (let i = 0; i < dataSource.length; i++) {\r\n      if (!cascadeMaps[i]) {\r\n        cascadeMaps[i] = new Map<CascadeValue, T>();\r\n      }\r\n      for (let j = 0; j < dataSource[i].length; j++) {\r\n        if (dataSource[i][j]) {\r\n          cascadeMaps[i].set(\r\n            dataSource[i][j][cascadeKeys.valueKey],\r\n            dataSource[i][j]\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    return cascadeMaps;\r\n  }\r\n\r\n  private cascadeData: CascadeData<T>;\r\n\r\n  cascadeMaps: Map<CascadeValue, T>[] = [];\r\n\r\n  constructor(props: Props<T>) {\r\n    super(props);\r\n\r\n    const dataSource = this.props.dataSource;\r\n    let keys: string[] = [];\r\n\r\n    if (dataSource) {\r\n      if (dataSource instanceof CascadeData) {\r\n        this.cascadeData = dataSource;\r\n      } else if (!Array.isArray(dataSource[0])) {\r\n        this.cascadeData = new CascadeData(\r\n          dataSource as T[],\r\n          this.props.cascadeKeys\r\n        );\r\n      } else {\r\n        keys = Cascade.buildKeys(dataSource.length);\r\n        this.cascadeMaps = this.buildCascadeMaps(dataSource as T[][]);\r\n      }\r\n    }\r\n    console.log(this.cascadeData);\r\n\r\n    this.state = {\r\n      ...new State(),\r\n      keys,\r\n    };\r\n  }\r\n\r\n  // 强制更新级联组件数据（不是一个好办法，待改进）\r\n  public updateDataSource = (dataSource: T[]): void => {\r\n    this.cascadeData = new CascadeData(\r\n      dataSource || [],\r\n      this.props.cascadeKeys\r\n    );\r\n    this.forceUpdate();\r\n  };\r\n\r\n  // 选择级联选项\r\n  private onChange = async (code: CascadeValue, level: number) => {\r\n    let value = [];\r\n\r\n    if (this.cascadeData) {\r\n      value = this.onSyncChange(code, level);\r\n    } else {\r\n      value = this.onAsyncChange(code, level);\r\n    }\r\n\r\n    if (!('value' in this.props)) {\r\n      this.setState({\r\n        value,\r\n      });\r\n    }\r\n\r\n    // 触发onChange\r\n    const onChange = this.props.onChange;\r\n    onChange && onChange(value, level);\r\n  };\r\n\r\n  // 当级联选项\r\n  private onSyncChange(value: CascadeValue, level: number): T[] {\r\n    const cascadeKeys = this.props.cascadeKeys;\r\n    const selectedValue = this.cascadeData.getItem(level, value);\r\n    let selectedValues = [...this.state.value];\r\n    const lastSelectedValue =\r\n      selectedValues[level] && selectedValues[level].code;\r\n\r\n    if (selectedValue) {\r\n      selectedValues[level] = selectedValue;\r\n    }\r\n\r\n    if (\r\n      !selectedValues[level] ||\r\n      lastSelectedValue !== selectedValues[level].code\r\n    ) {\r\n      for (\r\n        let index = level + 1;\r\n        index < this.cascadeData.getLength();\r\n        index++\r\n      ) {\r\n        const cascade = this.cascadeData.getFirstCascade(\r\n          index,\r\n          selectedValues[index - 1][cascadeKeys.valueKey]\r\n        );\r\n\r\n        if (cascade) {\r\n          selectedValues[index] = cascade;\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return selectedValues;\r\n  }\r\n\r\n  // 当异步获取级联选项时\r\n  private onAsyncChange(code: CascadeValue, level: number): T[] {\r\n    let value = this.state.value.slice(0, level);\r\n\r\n    if (this.cascadeMaps[level]) {\r\n      const selectedValue = this.cascadeMaps[level].get(code);\r\n\r\n      if (selectedValue) {\r\n        value[level] = selectedValue;\r\n      }\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  private getKeys(): string[] {\r\n    if (this.cascadeData) {\r\n      return this.cascadeData.getKeys();\r\n    } else {\r\n      return this.state.keys;\r\n    }\r\n  }\r\n\r\n  // 获取级联选项\r\n  private getSelections(): T[][] {\r\n    if (this.cascadeData) {\r\n      return this.cascadeData.getSelections(this.state.value);\r\n    } else {\r\n      return (this.props.dataSource as T[][]) || [];\r\n    }\r\n  }\r\n\r\n  static getDerivedStateFromProps(\r\n    nextProps: Props<any>,\r\n    prevState: State<any>\r\n  ): Partial<State<any>> | null {\r\n    let nextState: Partial<State<any>> = {};\r\n    const keysLength = prevState.keys.length;\r\n\r\n    if (\r\n      prevState.keys.length &&\r\n      Array.isArray(nextProps.dataSource) &&\r\n      keysLength !== nextProps.dataSource.length\r\n    ) {\r\n      const dataSourceLength = nextProps.dataSource.length;\r\n\r\n      if (keysLength < dataSourceLength) {\r\n        nextState.keys = [\r\n          ...prevState.keys,\r\n          ...Cascade.buildKeys(dataSourceLength - keysLength),\r\n        ];\r\n      } else {\r\n        nextState.keys = prevState.keys.slice(0, dataSourceLength);\r\n      }\r\n    }\r\n\r\n    if ('value' in nextProps) {\r\n      nextState.value = nextProps.value || [];\r\n    }\r\n\r\n    return nextState;\r\n  }\r\n\r\n  componentDidUpdate(prevProps: Props<T>, prevState: State<T>) {\r\n    if (prevProps.dataSource && this.props.dataSource) {\r\n      if (\r\n        JSON.stringify(prevProps.dataSource) !==\r\n        JSON.stringify(this.props.dataSource)\r\n      ) {\r\n        this.cascadeMaps = this.buildCascadeMaps(\r\n          this.props.dataSource as T[][]\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const keys = this.getKeys();\r\n    const cascadeKeys = this.props.cascadeKeys;\r\n\r\n    return (\r\n      <Row {...this.props.rowProps}>\r\n        {this.getSelections().map(\r\n          (cascades: T[], level: number): React.ReactNode => {\r\n            const value =\r\n              this.state.value[level] &&\r\n              this.state.value[level][cascadeKeys.valueKey];\r\n\r\n            return (\r\n              <Col key={keys[level]} {...this.props.colProps}>\r\n                <Select<CascadeValue>\r\n                  value={value}\r\n                  placeholder={'请选择'}\r\n                  onChange={(value: CascadeValue): void => {\r\n                    this.onChange(value, level);\r\n                  }}\r\n                >\r\n                  {cascades.map(\r\n                    (cascade: T): React.ReactNode => {\r\n                      return (\r\n                        <Option\r\n                          key={cascade[cascadeKeys.valueKey].toString()}\r\n                          value={cascade[cascadeKeys.valueKey]}\r\n                        >\r\n                          {cascade[cascadeKeys.labelKey]}\r\n                        </Option>\r\n                      );\r\n                    }\r\n                  )}\r\n                </Select>\r\n              </Col>\r\n            );\r\n          }\r\n        )}\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Cascade;\r\n","// 级联数据值类型\r\nexport declare type CascadeValue = string | number;\r\n\r\n// 级联数据类型\r\nexport class CascadeDefaultItem {\r\n  value?: CascadeValue;\r\n  label?: React.ReactNode;\r\n  children?: CascadeDefaultItem[];\r\n  [propName: string]: any;\r\n}\r\n\r\n// 级联数据类型\r\nexport class CascadeItem<T extends CascadeItem<T>> {\r\n  value?: CascadeValue;\r\n  label?: React.ReactNode;\r\n  children?: T[];\r\n  [propName: string]: any;\r\n}\r\n\r\n// 级联选项各字段对应的字段名\r\nexport class CascadeKeys {\r\n  valueKey: string = 'value';\r\n  labelKey: string = 'label';\r\n  childrenKey: string = 'children';\r\n}\r\n","import { PCAItem } from '../App';\r\nimport pcaCode from '../json/pca-code.json';\r\nimport { CascadeValue } from '../components/Cascade/CascadeTypes';\r\nimport CascadeData from '../components/Cascade/CascadeData';\r\n\r\nfunction sleep(t: number) {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(resolve, t);\r\n  });\r\n}\r\n\r\nconst pcaData = new CascadeData<PCAItem>(pcaCode, {\r\n  valueKey: 'code',\r\n  labelKey: 'name',\r\n  childrenKey: 'children',\r\n});\r\n\r\n// 模拟通过网络请求获取级联选项\r\nexport default async function getPCASelection(\r\n  code: CascadeValue\r\n): Promise<PCAItem[]> {\r\n  return new Promise(async (resolve, reject) => {\r\n    await sleep(500);\r\n    resolve(\r\n      pcaData.getSelectionByValue(code).map(\r\n        (item: PCAItem): PCAItem => {\r\n          let newItem = { ...item };\r\n          delete newItem.children;\r\n          return newItem;\r\n        }\r\n      )\r\n    );\r\n  });\r\n}\r\n","import React, { useState, useCallback } from 'react';\nimport './App.css';\nimport Cascade from './components/Cascade/Cascade';\nimport pcaCode from './json/pca-code.json';\nimport { CascadeValue, CascadeKeys } from './components/Cascade/CascadeTypes';\nimport getPCASelection from './services/getPCASelection';\nimport { Form, Button, Input } from 'antd';\nimport CascadeData from './components/Cascade/CascadeData';\nimport { RuleObject } from 'antd/lib/form';\nimport { StoreValue } from 'antd/lib/form/interface';\n\nexport class PCAItem {\n  code: number;\n  name: string;\n  children?: PCAItem[];\n}\n\nexport const pcaCascadeKeys: CascadeKeys = {\n  valueKey: 'code',\n  labelKey: 'name',\n  childrenKey: 'children',\n};\n\nconst pcaCascadeData = new CascadeData<PCAItem>(pcaCode, pcaCascadeKeys);\n\nfunction App() {\n  const [form] = Form.useForm();\n  const [pcaData, setPCAData] = useState<PCAItem[] | null>(null);\n  const [changedPCAIndex, setPCAIndex] = useState<number | null>(null);\n  const [asyncPCAData, setAsyncPCAData] = useState<PCAItem[] | null>(null);\n  const [changedAsyncPCAIndex, setAsyncPCAIndex] = useState<number | null>(\n    null\n  );\n  const [validateResult, setValidateResult] = useState<boolean | null>(null);\n  const [dataSource, setDataSource] = useState<PCAItem[][]>([\n    (pcaCode as PCAItem[]).map(\n      (item: PCAItem): PCAItem => ({\n        ...item,\n        children: undefined,\n      })\n    ),\n    [],\n    [],\n  ]);\n  const onValidate = useCallback(async () => {\n    try {\n      await form.validateFields();\n      setValidateResult(true);\n    } catch (error) {\n      setValidateResult(false);\n      console.error(error);\n    }\n  }, []);\n  const asyncPCAValidator = useCallback(\n    (rule: RuleObject, value: PCAItem[]) => {\n      if (Array.isArray(value) && value.length === dataSource.length) {\n        const index = dataSource.findIndex((item: PCAItem[]): boolean => {\n          if (item === null || item === undefined) {\n            return true;\n          } else {\n            return false;\n          }\n        });\n        if (index < 0) {\n          return Promise.resolve();\n        } else {\n          return Promise.reject('请选择正确地址');\n        }\n      } else {\n        return Promise.reject('请选择正确地址');\n      }\n    },\n    []\n  );\n\n  return (\n    <Form className={'App'} form={form}>\n      <Form.Item\n        name={'PCA'}\n        label={'树形级联数据'}\n        extra={`已选择的数据：${\n          pcaData ? JSON.stringify(pcaData) : ''\n        }，变化的层级：${\n          typeof changedPCAIndex === 'number' ? changedPCAIndex : ''\n        }`}\n        rules={[\n          {\n            validator: pcaCascadeData.cascadeValidator,\n            message: '请选择正确地址',\n          },\n        ]}\n      >\n        <Cascade<PCAItem>\n          dataSource={pcaCascadeData}\n          cascadeKeys={pcaCascadeKeys}\n          onChange={async (value: PCAItem[], level: number) => {\n            setPCAData(value);\n            setPCAIndex(level);\n          }}\n        />\n      </Form.Item>\n      <Form.Item\n        name={'AsyncPCA'}\n        label={'异步级联数据'}\n        extra={`已选择的数据：${\n          asyncPCAData ? JSON.stringify(asyncPCAData) : ''\n        }，变化的层级：${\n          typeof changedAsyncPCAIndex === 'number' ? changedAsyncPCAIndex : ''\n        }`}\n        rules={[\n          {\n            validator: asyncPCAValidator,\n            message: '请选择正确地址',\n          },\n        ]}\n      >\n        <Cascade<PCAItem>\n          dataSource={dataSource}\n          cascadeKeys={pcaCascadeKeys}\n          onChange={async (value: PCAItem[], level: number) => {\n            setAsyncPCAData(value);\n            setAsyncPCAIndex(level);\n            if (level < dataSource.length - 1) {\n              const newCascade = await getPCASelection(\n                value[level].code as CascadeValue\n              );\n              const newDataSource = dataSource.map(\n                (cascades: PCAItem[], index: number): PCAItem[] => {\n                  if (index <= level) {\n                    return cascades;\n                  } else if (index === level + 1) {\n                    return newCascade;\n                  } else {\n                    return [];\n                  }\n                }\n              );\n\n              setDataSource(newDataSource);\n            }\n          }}\n        />\n      </Form.Item>\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'center',\n          marginBottom: '10px',\n        }}\n      >\n        <Button type={'primary'} onClick={onValidate}>\n          校验表单\n        </Button>\n      </div>\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'center',\n          lineHeight: '24px',\n        }}\n      >\n        校验结果：\n        {validateResult === null ? (\n          ''\n        ) : validateResult ? (\n          <span style={{ color: 'green', fontWeight: 'bold' }}>成功</span>\n        ) : (\n          <span style={{ color: 'red', fontWeight: 'bold' }}>失败</span>\n        )}\n      </div>\n    </Form>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}